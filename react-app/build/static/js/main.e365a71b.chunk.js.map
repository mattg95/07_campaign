{"version":3,"sources":["DisplayMp.jsx","FindMp.jsx","TextBox.jsx","TypeForm.jsx","App.jsx","reportWebVitals.js","index.js"],"names":["DisplayMp","data","constituency","full_name","party","name","body","subject","createMpEmail","toLowerCase","replace","className","href","encodeURIComponent","Object","values","join","MpForm","useState","state","setState","postToApi","postcode","a","fetch","method","headers","then","response","json","initialValues","validate","test","toUpperCase","component","htmlFor","type","socket","socketIOClient","TextBox","responseId","formToken","editedRes","generatedEmail","useEffect","isMounted","on","console","log","viewContainerClassName","inputProps","placeholder","rows","saveButtonContent","cancelButtonContent","editButtonContent","value","onSave","val","TypeForm","myRef","useRef","typeformEmbed","current","hideFooter","hideHeaders","opacity","onSubmit","response_id","ref","require","config","path","App","Container","Row","Col","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.e365a71b.chunk.js","sourcesContent":["import React from \"react\";\n\nconst DisplayMp = ({\n  data: { constituency, full_name, party, name },\n  body,\n  subject,\n}) => {\n  const createMpEmail = () => {\n    const mpName = full_name ? full_name : name;\n    return mpName.toLowerCase().replace(\" \", \".\") + \".mp@parliament.uk\";\n  };\n  return (\n    <div className=\"mpCard\">\n      <div>{constituency}</div>\n      <div>{name}</div>\n      <div>{full_name}</div>\n      <div>{party}</div>\n      <div> {createMpEmail()}</div>\n      <a\n        href={\n          \"mailto:\" +\n          createMpEmail() +\n          \"?Subject=\" +\n          encodeURIComponent(subject) +\n          \"&Body=\" +\n          encodeURIComponent(Object.values(body).join(\"\"))\n        }\n        className=\"btn btn-primary\"\n      >\n        SEND EMAIL\n      </a>\n    </div>\n  );\n};\nexport default DisplayMp;\n","// Render Prop\nimport React, { useState } from \"react\";\nimport { Formik, Form, Field, ErrorMessage } from \"formik\";\nimport DisplayMp from \"./DisplayMp\";\n\nconst MpForm = ({ body, subject }) => {\n  const [state, setState] = useState({ data: \"\" });\n\n  const postToApi = async (postcode) => {\n    const response = await fetch(`/api/postcode/${postcode}`, {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n    })\n      .then((response) => response.json())\n      .then((data) => setState({ data: data }));\n\n    return response;\n  };\n\n  const handleValidation = ({ postcode }) => {\n    const errors = {};\n    const postCodeRegex = /([A-Z][A-HJ-Y]?[0-9][A-Z0-9]? ?[0-9][A-Z]{2}|GIR ?0A{2})$/;\n    if (postCodeRegex.test(postcode.toUpperCase())) {\n      postToApi(postcode);\n    } else {\n      //reutrn invalid postcode\n    }\n  };\n\n  return (\n    <div>\n      <Formik initialValues={{ postcode: \"\" }} validate={handleValidation}>\n        {(values) => (\n          <Form className=\"getMpForm\">\n            <ErrorMessage name=\"postcode\" component=\"div\" />\n            <label htmlFor=\"postcode\">Postcode:</label>\n            <Field type=\"text\" name=\"postcode\" />\n          </Form>\n        )}\n      </Formik>\n      {state.data && (\n        <DisplayMp data={state.data} body={body} subject={subject} />\n      )}\n    </div>\n  );\n};\nexport default MpForm;\n","import React, { useEffect, useState } from \"react\";\nimport socketIOClient from \"socket.io-client\";\n\nimport EdiText from \"react-editext\";\n\nconst socket = socketIOClient();\n\nconst TextBox = ({ responseId }) => {\n  //the responseId comes from the embeded typeform\n  const [state, setState] = useState({\n    formToken: \"\", //the form token comes from the webhook response\n    editedRes: \"\",\n    generatedEmail: {},\n  });\n\n  useEffect(() => {\n    let isMounted = true;\n    socket.on(\"typeform-incoming\", ({ formToken, generatedEmail }) => {\n      // console.log(formToken, generatedEmail);\n      if (isMounted) setState({ ...state, formToken: formToken });\n      if (state.formToken === responseId) {\n        setState({ ...state, generatedEmail: generatedEmail });\n      }\n    });\n    return () => {\n      isMounted = false;\n    };\n  }, []);\n  console.log(state);\n\n  return (\n    <EdiText\n      viewContainerClassName=\"emailBox\"\n      type=\"text\"\n      inputProps={{\n        placeholder: \"your email will appear here\", //placeholder isn't working\n        rows: 5,\n      }}\n      saveButtonContent=\"Apply\"\n      cancelButtonContent={<strong>Cancel</strong>}\n      editButtonContent=\"Edit Your Email\"\n      value={state.editedRes ? state.editedRes : state.generatedEmail.body} // validates the webhook response token against the response id from the embedded tyeform widget\n      onSave={(val) => {\n        setState({ ...state, editedRes: val }); //if the user edits the text box, a new property called editedResponse is set in state\n      }}\n    />\n  );\n};\n\nexport default TextBox;\n","import React, { useEffect, useRef, useState } from \"react\";\nimport * as typeformEmbed from \"@typeform/embed\";\nimport TextBox from \"./TextBox\";\n\nconst TypeForm = () => {\n  const myRef = useRef(null);\n  const [state, setState] = useState(\"\");\n\n  useEffect(() => {\n    typeformEmbed.makeWidget(\n      myRef.current,\n      `https://z8ivgb8lhnl.typeform.com/to/YbkRDwtc`,\n      {\n        hideFooter: true,\n        hideHeaders: true,\n        opacity: 0,\n        onSubmit: ({ response_id }) => setState(response_id),\n      }\n    );\n  }, [myRef]);\n\n  return (\n    <div>\n      <div ref={myRef} className=\"typeform-widget\" />\n      <TextBox responseId={state} />\n    </div>\n  );\n};\n\nexport default TypeForm;\n","import \"./App.scss\";\nimport { Container, Row, Col } from \"react-bootstrap\";\n\nimport MpForm from \"./FindMp\";\nimport TypeForm from \"./TypeForm\";\nimport TextBox from \"./TextBox\";\n\nrequire(\"dotenv\").config({ path: \"../.env\" });\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Container>\n        <Row>\n          <Col>\n            <h1 className=\"text-center\">0.7% Campaign</h1>\n          </Col>\n        </Row>\n        <Row>\n          <Col>\n            <p className=\"text-center\">\n              Info about our campaign. Lorem ipsum dolor sit amet, consectetur\n              adipiscing elit, sed do eiusmod tempor incididunt ut labore et\n              dolore magna aliqua. Ut enim ad minim veniam, quis nostrud\n              exercitation ullamco laboris nisi ut aliquip ex ea commodo\n              consequat.Lorem ipsum dolor sit amet, consectetur adipiscing elit,\n              sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.\n              Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris\n              nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in\n              reprehenderit in voluptate velit esse cillum dolore eu fugiat\n              nulla pariatur. Excepteur sint occaecat cupidatat non proident,\n              sunt in culpa qui officia deserunt mollit anim id est laborum.\n            </p>\n          </Col>\n        </Row>\n        <Row>\n          <Col>\n            <div className=\"text-center\">\n              <TypeForm />\n            </div>\n          </Col>\n        </Row>\n        <Row>\n          <Col>\n            <div className=\"text-center\">\n              <MpForm body=\"\" subject=\"\" />\n            </div>\n          </Col>\n        </Row>\n      </Container>\n    </div>\n    // Cookie banner here\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}